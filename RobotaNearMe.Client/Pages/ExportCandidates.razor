@page "/exportcandiates/{jobOfferId}"
@using IronXL
@using RobotaNearMe.Client.Data
@using RobotaNearMe.Client.Services
@using RobotaNearMe.Lib.Modelos
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Download CVs</h3>
@foreach (var i in _jobOffers)
{
    <div>
        <div>@i.User.Name @i.User.Surname</div>
        <button @onclick="() => DownloadCV(i.User.Id)">Download CV for user @i.User.Name</button>
    
    </div>
}


<h3>ExportCandidates</h3>
<button @onclick="OnExportToExcel">Export data to Excel</button>
<button @onclick="OnExportToPDF">Export data to PDF</button>

@inject ApiService _service
@inject ExportToExcel _excel
@inject ExportToPDF _pdf
@inject NavigationManager NavigationManager
@code {


    [Parameter] public string JobOfferId { get; set; }
    private JobOffer _offer { get; set; }

    private int _jobFieldId;
    private List<int> _jobFieldIds = new();
    private List<OfferInUser> _jobOffers;
    private List<JobField> _jobFields;
    private JobType? _selectedJobType;
    private List<JobOffer> _filteredJobOffers;
    private LocationRegion? _selectedLocation;
    private CompanyReal _company;
    private List<User> _users;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string mail = user.Identity.Name;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            Guid _realOfferId = Guid.Parse(JobOfferId);
            _offer = _service.GetOffers().Where(x => x.Id == _realOfferId).FirstOrDefault();
            _company = _service.GetCompanyByCompanyId(_offer.CompanyId);
            _jobOffers = _service.GetOffersInUsers(_offer.Id).ToList();
            //_jobFields = _service.GetJobFields().ToList();
            // var useros = _service.GetUserByName(mail);
            // _user = useros;
        }
        else
        {

        }
    }
    private void DownloadCV(Guid clientId)
    {
        FileTable file = _service.GetFileForUser(clientId);
        if (file != null)
        {
            string path = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\Downloads";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string filePath = Path.Combine(path, file.Name);
            File.WriteAllBytes(filePath, file.Data);
            File.SetLastWriteTime(filePath, DateTime.Now);
        }
        else
        {

        }
    }
    private void OnExportToExcel()
    {
        //_excel.ExportAllUsers(_service, companyName);
        _excel.ExportAllCandiates(_jobOffers, _company.Name);
    }
    private void OnExportToPDF()
    {
        _pdf.ExportAllUsersThatAppliedForJob(_jobOffers, _company.Name);
    }
}
