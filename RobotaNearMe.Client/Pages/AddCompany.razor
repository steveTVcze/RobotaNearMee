@page "/addcompany"
@using RobotaNearMe.Lib.Modelos
@using RobotaNearMe.Client.Services
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Add company</h3>

<form @onsubmit="OnSubmit">
    <div class="top-controls card" style="color:black">
        <div>This move will remove you from the role User and add you to role Admin. From now on, you wont be able to see job offers. </div>
        <div class="card-header">
            <label>
                Add company
            </label>
        </div>
        <div class="card-body" style="display:flex; flex-direction:column;">
            <div class="form-floating mb-3">
                <input required @bind="_company.Name" class="form-control" placeholder="Please enter your ic." />
                <label class="form-label">Company name</label>
                <span class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input required @bind="_company.Website" class="form-control" placeholder="Please enter your ic." />
                <label class="form-label">company website</label>
                <span class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <textarea @bind="_company.Info" style="height: 150px;" class="form-control" placeholder="Please enter your ic."></textarea>
                <label class="form-label">Company info</label>
                <span class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input required @bind="_company.ProfilePicture" class="form-control" placeholder="Please enter your ic." />
                <label class="form-label">Company profile picture</label>
                <span class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input required @bind="_company.Founded" class="form-control"  placeholder="Please enter your ic." />
                <label class="form-label">Founded in:</label>
                <span class="text-danger"></span>
            </div>

            

           <RobotaNearMe.Client.Components.ContactComponent Contact="Contact"></RobotaNearMe.Client.Components.ContactComponent>
            
            @* <select @bind="_jobFieldId" class="form-control">
                @if (_jobFields != null)
                {
                    @foreach (var field in _jobFields)
                    {
                        <option value="@field.Id">@field.Field</option>
                    }
                }
            </select>
            <select @bind="_locationId" class="form-control">
                @foreach (LocationRegion region in Enum.GetValues(typeof(LocationRegion)))
                {
                    <option value="@((int)region)">@region.ToString()</option>
                }
            </select> *@
        </div>
        <div class="card-footer">
            <button class="btn-success" type="submit"> Add company </button>
        </div>
    </div>
</form>

@inject ApiService _service
@code {


    public Guid Id;
    public Guid ContactId;
    public Guid UserId;
    public ContactCompany Contact = new();
    public User Admin = new();

    private string _title;
    private string _description;
    private int _jobFieldId;
    private int _locationId;
    private List<int> _jobFieldIds = new();
    private List<JobField> _jobFields;
    private CompanyReal _company = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string mail = user.Identity.Name;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            _jobFields = _service.GetJobFields().ToList();
            var useros = _service.GetUserByName(mail);
            Admin = useros;
            //var company = _service.GetCompanyById(useros.Id);
            //company = _company;
        }
        else
        {

        }

    }
    private void OnSubmit()
    {
        if (_company != null)
        {
            // JobOffer jo = new();
            // jo.Added = DateTime.UtcNow;
            // jo.LastUpdated = DateTime.UtcNow;
            // jo.Title = _title;
            // jo.StillValid = true;
            // jo.CompanyId = _company.Id;
            // jo.Description = _description;
            // jo.JobFieldId = _jobFieldId;
            // jo.LocationId = (LocationRegion)_locationId;

            var s = Contact;
            s.Id = Guid.NewGuid();
            s.DIC = "12312412";
            s.IC = "1541212";
            var c = _company;
            c.Admin = Admin;
            c.ContactCompanyId = s.Id;
            c.Id = Guid.NewGuid();
            c.UserId = Admin.Id;
            _service.PostCompanyContact(s);
            _service.PostCompany(c);
            
        }
        //List<JobOffer> newOffers = _jobOffers.Where(x => x.JobFieldId == _jobFieldId).ToList();
    }

}
