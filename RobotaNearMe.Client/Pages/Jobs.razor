@page "/jobs"
@using RobotaNearMe.Lib.Modelos
@using RobotaNearMe.Client.Services
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container mt-1">
    <div style="padding-top: 10px">
        <h5>Filter</h5>
        <div class="form-group">
            <label for="jobTypeFilter">Job Type:</label>
            <select class="form-control" @bind="_selectedJobType">
                <option value="">All</option>
                @foreach (JobType jobType in Enum.GetValues(typeof(JobType)))
                {
                    <option value="@jobType">@jobType.ToString()</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="locationFilter">Location:</label>
            <select class="form-control" @bind="_selectedLocation">
                <option value=""> All</option>
                @foreach (LocationRegion region in Enum.GetValues(typeof(LocationRegion)))
                {
                    <option value="@(region)">@region.ToString()</option>
                }
            </select>
        </div>

        <button class="btn btn-primary" @onclick="OnFilter">Filter</button>

        @foreach (var item in _filteredJobOffers ?? _jobOffers)
        {
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title"> @item.Title </h5>
                    <p class="card-text"> @item.Language </p>
                    <p class="card-text"> @item.Added </p>
                    <button class="btn btn-success" @onclick="(() => OnSelect(item))">More information</button>
                </div>
            </div>
        }
    </div>
</div>

@inject ApiService _service
@inject NavigationManager NavigationManager
@code {
    private int _jobFieldId;
    private List<int> _jobFieldIds = new();
    private List<JobOffer> _jobOffers;
    private List<JobField> _jobFields;
    private JobType? _selectedJobType;
    private List<JobOffer> _filteredJobOffers;
    private LocationRegion? _selectedLocation;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _jobOffers = _service.GetOffers().Where(x => x.StillValid == true).ToList();
        _jobFields = _service.GetJobFields().ToList();
        _filteredJobOffers = new List<JobOffer>();

    }
    private void OnSelect(JobOffer _selected)
    {
        NavigationManager.NavigateTo($"/jobdetails/{_selected.Id.ToString()}");
    }
    private void OnFilter()
    {
        _filteredJobOffers = new List<JobOffer>();
        foreach (var jobOffer in _jobOffers)
        {
            if (_selectedJobType.HasValue && _selectedJobType.Value == null && _selectedLocation == null)
            {
                _filteredJobOffers.Add(jobOffer);
            }
            // else if ((!_selectedJobType.HasValue && (!_selectedLocation.HasValue || _selectedLocation == jobOffer.LocationId)) || _selectedJobType.HasValue && _selectedJobType.Value == jobOffer.JobTypeId && _selectedLocation == null || !_selectedJobType.HasValue && _selectedLocation == jobOffer.LocationId || !_selectedJobType.HasValue && !_selectedLocation.HasValue || _selectedJobType.HasValue && _selectedJobType.Value == null && _selectedLocation == jobOffer.LocationId || _selectedJobType.Value == jobOffer.JobTypeId && _selectedLocation == jobOffer.LocationId)
            else if ((_selectedJobType == null || jobOffer.JobTypeId == _selectedJobType) && (_selectedLocation == null || jobOffer.LocationId == _selectedLocation))
            {
                _filteredJobOffers.Add(jobOffer);
            }
        }
    }

}
