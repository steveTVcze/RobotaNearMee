@page "/addjoboffer"
@using RobotaNearMe.Lib.Modelos
@using RobotaNearMe.Client.Services
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Add job offer</h3>

<form @onsubmit="OnSubmit">
    <div class="top-controls card" style="color:black">
        <div class="card-header">
            <label>
                Add category
            </label>
        </div>
        <div class="card-body" style="display:flex; flex-direction:column;">
            <label>
                Title:
            </label>
            <input style="width:350px" type="text" asp-for="Title" required />
            <label>
                Description:
            </label>
            <input style="width:350px" type="text" asp-for="Description" required />
            <select @bind="_jobFieldId" class="form-control">
                @if (_jobFields != null)
                {
                    @foreach (var field in _jobFields)
                    {
                        <option value="@field.Id">@field.Field</option>
                    }
                }
            </select>
        </div>
        <div class="card-footer">
            <button class="btn-success" type="submit"> Add job offer </button>
        </div>
    </div>
</form>

@inject ApiService _service
@code {
    private int _jobFieldId;
    private List<int> _jobFieldIds = new();
    private List<JobField> _jobFields;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _jobFields = _service.GetJobFields().ToList();
        // if (user.Identity != null && user.Identity.IsAuthenticated)
        // {
        // }
        // else
        // {

        // }

    }
    private void OnSubmit()
    {
        //List<JobOffer> newOffers = _jobOffers.Where(x => x.JobFieldId == _jobFieldId).ToList();
    }

}
